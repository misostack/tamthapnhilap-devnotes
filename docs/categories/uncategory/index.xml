<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uncategory on DevNotes 2019</title>
    <link>https://devnotes.tamthapnhilap.site/categories/uncategory/</link>
    <description>Recent content in uncategory on DevNotes 2019</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi-VN</language>
    <copyright>Everything is mine</copyright>
    <lastBuildDate>Fri, 17 Aug 2018 14:20:36 +0700</lastBuildDate>
    
	<atom:link href="https://devnotes.tamthapnhilap.site/categories/uncategory/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Backend Roadmap</title>
      <link>https://devnotes.tamthapnhilap.site/blog/backend-roadmap/</link>
      <pubDate>Fri, 17 Aug 2018 14:20:36 +0700</pubDate>
      
      <guid>https://devnotes.tamthapnhilap.site/blog/backend-roadmap/</guid>
      <description>The right ways 1. Pick a language  If you are a beginner, pick one of scripting languages like: php, ruby, python, node.js( typescript ) If you have some frontend knowledge, you might fight node.js to be quite easier plus. If you have knowledge with one of scripting languages above, improve your knowledge and go deeper with it.  In this first steps, your targets can be:
 Base knowledge of a scripting language OOP Programming Basic knowledge about HTTP Request and Response Common: Array Manipulation, File IO, CSV, JSON Package manager Library Unit Test  Main targets:</description>
    </item>
    
    <item>
      <title>The Api World</title>
      <link>https://devnotes.tamthapnhilap.site/blog/the-api-world/</link>
      <pubDate>Thu, 16 Aug 2018 16:00:49 +0700</pubDate>
      
      <guid>https://devnotes.tamthapnhilap.site/blog/the-api-world/</guid>
      <description>References  https://www.moesif.com/blog/api-guide/api-design-guidelines/ https://www.restapitutorial.com/lessons/restfulresourcenaming.html https://www.programmableweb.com/category/all/apis  Completely Stateless  Origin : https://www.youtube.com/watch?v=67mezK3NzpU  1.Several problems with session id
One server is not enough
 We use load balancer? Where to stored memory?  =&amp;gt; This will lead us to shared cache ==&amp;gt; not works with a overloading connections =&amp;gt; Distributed cache ( but complicated )
 Sticky sessions in load balancer?  ==&amp;gt; Sticky sessions + distributed cache
 Manage this in client side: JSON + WEB + TOKEN ( JWT )  JWT vs SessionID</description>
    </item>
    
  </channel>
</rss>