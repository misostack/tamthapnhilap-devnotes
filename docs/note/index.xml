<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on DevNotes 2019</title>
    <link>//devnotes.tamthapnhilap.site/note/</link>
    <description>Recent content in Notes on DevNotes 2019</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>vi-VN</language>
    <copyright>Everything is mine</copyright>
    <lastBuildDate>Wed, 23 Oct 2019 14:18:56 +0700</lastBuildDate><atom:link href="//devnotes.tamthapnhilap.site/note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monday Api 001 Dev</title>
      <link>//devnotes.tamthapnhilap.site/note/monday-api-001-dev/</link>
      <pubDate>Wed, 23 Oct 2019 14:18:56 +0700</pubDate>
      
      <guid>//devnotes.tamthapnhilap.site/note/monday-api-001-dev/</guid>
      <description>Things need to do:  Design Application Structures: REST API, Core Module Design REST API Endpoints Design Models, Schemas, Services Document REST API Endpoints Design Data Validations Design Pagination, Search Integrate Services with Related Resources Secured: CORS, JWT Testing API with Postman Improvement with: Index, Caching, Elastic Search,&amp;hellip; Automation: make generators that generate new resources endpoint from json data Common Services: Mailer &amp;amp; SMS, Cron, Task Queues Deployment: Heroku, VPS, CI &amp;amp; CD with gitlab, ci  Application Structures { &amp;#34;flaskr&amp;#34;: { &amp;#34;core&amp;#34;: [ &amp;#34;base&amp;#34;, &amp;#34;db&amp;#34;, &amp;#34;helpers&amp;#34; ], &amp;#34;admin&amp;#34;: { &amp;#34;admin_core&amp;#34;: [ &amp;#34;controllers&amp;#34;, &amp;#34;services&amp;#34;, &amp;#34;helpers&amp;#34; ], &amp;#34;admin_auth&amp;#34;: [ &amp;#34;controllers&amp;#34;, &amp;#34;services&amp;#34;, &amp;#34;helpers&amp;#34; ] }, &amp;#34;templates&amp;#34;: { &amp;#34;admin&amp;#34;: { &amp;#34;admin_core&amp;#34;: [ &amp;#34;dashboard&amp;#34; ], &amp;#34;admin_auth&amp;#34;: [ &amp;#34;auth&amp;#34;, &amp;#34;auth_login&amp;#34;, &amp;#34;auth_forget_password&amp;#34;, &amp;#34;auth_reset_password&amp;#34; ], } }, &amp;#34;api&amp;#34;: { &amp;#34;v1&amp;#34;:[ &amp;#34;__init__&amp;#34;, &amp;#34;users&amp;#34;, &amp;#34;books&amp;#34;, &amp;#34;categories&amp;#34;, &amp;#34;tags&amp;#34;, &amp;#34;reading-plans&amp;#34;, &amp;#34;reading-logs&amp;#34; ] }, &amp;#34;__init__&amp;#34; }, &amp;#34;instance&amp;#34;: [], &amp;#34;tests&amp;#34;: { &amp;#34;admin&amp;#34;: [ // .</description>
    </item>
    
    <item>
      <title>Iome 001 Initialize</title>
      <link>//devnotes.tamthapnhilap.site/note/iome-001-initialize/</link>
      <pubDate>Wed, 21 Nov 2018 16:16:13 +0700</pubDate>
      
      <guid>//devnotes.tamthapnhilap.site/note/iome-001-initialize/</guid>
      <description>Requirements  Bài toán 1: SimpleAuth - xây dựng chức năng auth đơn giản, ko cần phân quyền theo module Bài toán 2: SimpleTodoList: List(Group Of TodoList), Statuses( Backlog, OnGoing, Postponed, ToBeTested, TobeValidated, Closed ), Types(2M, A, B, C, D) Bài toán 3: Messages: nhật kí dự án( message, statuses[&amp;lsquo;new&amp;rsquo;,&amp;lsquo;done&amp;rsquo;,&amp;lsquo;inprogress&amp;rsquo;,&amp;lsquo;error&amp;rsquo;,&amp;lsquo;delayed&amp;rsquo;,&amp;lsquo;removed&amp;rsquo;]) Bài toán 4: Status: system status( status, statuses[&amp;lsquo;up&amp;rsquo;,&amp;lsquo;bug&amp;rsquo;,&amp;lsquo;down&amp;rsquo;])  Diễn giải 2M: 2 minutes work: do it now, and the deadline is in 10 mins.</description>
    </item>
    
    <item>
      <title>Ng CRMExpress 001</title>
      <link>//devnotes.tamthapnhilap.site/note/ng-crmexpress-001/</link>
      <pubDate>Mon, 01 Oct 2018 10:48:28 +0700</pubDate>
      
      <guid>//devnotes.tamthapnhilap.site/note/ng-crmexpress-001/</guid>
      <description>Introduction Tại sao cần CRM?
 Chăm sóc khách hàng ngay từ khi chưa là khách hàng : https://www.youtube.com/watch?v=6omS6AF4-ww  Mục tiêu: xây dựng tiềm thức trong khách hàng về brand name.
Đây là phiên bản CRM miễn phí dành cho các doanh nghiệp vừa và nhỏ Việt Nam. Phần mềm được viết dựa trên angular 6. Phần mềm sẽ gồm 3 đối tượng: Owner, Users, Customer.
 Mỗi account Owner được phép tạo 1 tổ chức(company).</description>
    </item>
    
    <item>
      <title>Reactjs Ways - React Router - React Redux</title>
      <link>//devnotes.tamthapnhilap.site/note/reactjs-ways-003/</link>
      <pubDate>Fri, 03 Aug 2018 10:18:06 +0700</pubDate>
      
      <guid>//devnotes.tamthapnhilap.site/note/reactjs-ways-003/</guid>
      <description>1.Install  Refs : https://reacttraining.com/react-router/web/guides/philosophy  npm install react-router-dom -D 2.Folder Structure Refs: https://engineering.opsgenie.com/how-to-organize-react-files-before-its-messed-up-c85387f691be
There are several ways, but in summary:
By File Type
This is very simple structure which almost use for small application and for learning purpose
└── src └── actions └── group.js └── user.js └── components └── group-list.js └── group-item.js └── user-avatar.js └── user-box.js └── user-item.js └── containers └── App.js └── group.js └── user.js └── reducers └── group.</description>
    </item>
    
    <item>
      <title>Reactjs Ways - Advanced Solutions</title>
      <link>//devnotes.tamthapnhilap.site/note/reactjs-ways-002/</link>
      <pubDate>Tue, 31 Jul 2018 13:56:05 +0700</pubDate>
      
      <guid>//devnotes.tamthapnhilap.site/note/reactjs-ways-002/</guid>
      <description>1.Accessibility Refs
  Full of story
  Checklist
  WAI-ARIA
  &amp;lt;div className=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label&amp;gt;Email address&amp;lt;/label&amp;gt; &amp;lt;input type=&amp;#34;email&amp;#34; aria-label={`Please enter your email`} aria-required=&amp;#34;true&amp;#34; className=&amp;#34;form-control&amp;#34; onChange={this.handleChange} value={this.state.email} name=&amp;#34;email&amp;#34; aria-describedby=&amp;#34;emailHelp&amp;#34; placeholder=&amp;#34;Enter email&amp;#34; /&amp;gt; &amp;lt;small id=&amp;#34;emailHelp&amp;#34; className=&amp;#34;form-text text-muted&amp;#34;&amp;gt;We&amp;#39;ll never share your email with anyone else.&amp;lt;/small&amp;gt; &amp;lt;/div&amp;gt;   Semantic HTML
  Accessible Forms
  &amp;lt;div className=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label htmlFor=&amp;#34;email&amp;#34;&amp;gt;Email address&amp;lt;/label&amp;gt; &amp;lt;input id=&amp;#34;email&amp;#34; type=&amp;#34;email&amp;#34; aria-label={`Please enter your email`} aria-required=&amp;#34;true&amp;#34; className=&amp;#34;form-control&amp;#34; onChange={this.</description>
    </item>
    
    <item>
      <title>Reactjs Ways - Main Concepts</title>
      <link>//devnotes.tamthapnhilap.site/note/reactjs-ways-001/</link>
      <pubDate>Tue, 31 Jul 2018 13:47:58 +0700</pubDate>
      
      <guid>//devnotes.tamthapnhilap.site/note/reactjs-ways-001/</guid>
      <description>1.JSX const element = &amp;lt;img src={user.avatarUrl}&amp;gt;&amp;lt;/img&amp;gt;; const element = &amp;lt;h1&amp;gt;Hello, {formatName(user)}!&amp;lt;/h1&amp;gt; const element = React.createElement( &amp;#39;h1&amp;#39;, {className: &amp;#39;greeting&amp;#39;}, &amp;#39;Hello, world!&amp;#39; ); ReactDOM.render(element, document.getElementById(&amp;#39;root&amp;#39;)); 2.Render ReactDOM.render(element, document.getElementById(&amp;#39;root&amp;#39;)); https://en.wikipedia.org/wiki/Immutable_object
3.Components and Props  Rendering a Component Composing Components Extracting Components Props are Read-Only  The simplest way to define a component is to write a JavaScript function:
function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; } Common way to define a component(ES6 class):
class Welcome extends React.</description>
    </item>
    
  </channel>
</rss>
